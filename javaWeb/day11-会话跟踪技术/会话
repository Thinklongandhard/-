会话技术
 
  会话：
    用户打开浏览，访问web服务器的资源，会话建立，直到一方断开连，会话结束。在一次
	会话中可以包含多次请求和响应
  会话跟踪：
    一种维护浏览状态的方法，服务器需要识别多次请求是否来同一浏览器，以便在同一次
	会话的多次请求间共享数据
  HTTP协议是无状态的，每次浏览器向服务器请求时，服务器都会将该请求视为新的请求，
  因此我们需要会话跟踪技术来实现会话内数据共享
  
Cookie 和 Session
  客户端会话跟踪技术
    Cookie ：数据存储在浏览器端
  服务端会话跟踪技术
    Session ：数据存储在服务器端
	
	Cookie的工作流：
	  同一个客户端发送第一次请求给服务端，服务端接收数据，并将数据打包发送给客户端
	  进行响应，客户端将接收的到的数据进行存储，当客户端发送第二次请求的时候，
	  会携带着第一次的数据一同发送给了服务端，这就实现了同一个会话过程中的数据共享
	Cookie 的基本使用
	  发送 Cookie
	    创建 Cookie对象，设置数据
		  Cookie cookie = new Cookie("key","value";)
		发送 Cookie到客户端：使用 response 对象
		  response.addCookie(cookie);
	  获取 Cookie
	    获取客户端携带的所有Cookie，使用request对象
		  Cookie[] cookies = request.getCookies();
		遍历数组，获取每一个Cookie对象：for
		使用Cookie对象方法获取数据
		  cookie.getName();
		  cookie.getValue();
		  
	Cookie 使用细节
	  Cookie存活时间
	    默认情况下，Cookie存储在浏览器内存中，当浏览器关闭，内存释放，则Cookie被
		  销毁
		setMaxAge(int seconds)：设置Cookie存活时间
		  正数：将 Cookie 写入浏览器所在电脑的硬盘，持久化存储，到时间自动删除
		  负数：默认值，Cookie在当前浏览器内存中，当浏览器关闭，则Cookie被销毁
		  零：删除对应Cookie
	  Cookie 存储中文
	    Cookie 不能直接存储中文
		如果需要存储，则需要进行转码：URL编码
		
		
Session 
  服务端会话追踪技术：将数据保存到服务端
    JavaEE 提供 HttpSession 接口，来实现一次会话的多次请求间数据共享功能
	使用：
	  获取Session对象
	    HttpSession session = request.getSession();
	  Session对象功能
	    void setAttribute(String name,Object o)
		  //存储数据到 session 域中
		Object getAttribute(String name)
		  //根据 key ，获取值
		void removeAttribute(String name)
		  //根据 key ，删除该键值对
	Session 的使用细节
	  Session 的钝化和活化
	    服务器重启后，Session中的数据是否还存在
		钝化：在服务器正常关闭后，Tomcat会自动将Session数据写入硬盘的文件中
		活化：再次启动服务器后，从文件中加载数据到Session中
	  Session 销毁：
	    1、默认情况下，无操作，30分钟自动销毁
		<session-config>
			//可以自己设置时间，单位是分钟
			<session-timeout>30</session-tomcat>
		</session-config>
		2、调用 Session对象的 invalidate 方法销毁
		
		
小结：
  Cookie 和 Session 都是来完成一次会话内多次请求间数据共享的
  区别：
    存储位置：Cookie 是将数据存储在客户端，Session 将数据存储在服务端
	安全性：Cookie 不安全，Session 安全
	数据大小：Cookie 最大只能存3kb ，Session无大小限制
	存储时间：Cookie可以长期存储，Session默认30分钟
	服务器性能：Cookie 不占服务器资源，Session占用服务器资源