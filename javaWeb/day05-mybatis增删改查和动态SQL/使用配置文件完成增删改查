配置文件完成增删改查

数据库表的字段名称 和 实体类的属性名称不一样，则不能自动封装数据
  起别名：对不一样的列名器别名，让别名和实体类的属性名一样
    缺点：每次查询都有定义一次别名
	  使用SQL片段
	    缺点：不灵活
  resultMap：方便，灵活
    <resultMap id = "该标签的别名" type = "返回值类型">
	    <result column = "表中列名" property = "实体类中的属性" />
		<result column = "表中列名" property = "实体类中的属性" />
	</resultMap>
	
	<select id = "sql的唯一标识" resultMap = "标签别名">
	   SQL语句
	</select>
	
  参数占位符：
    #{}：会讲其替换为？，为了防止SQL注入
	${}：拼sql，会存在SQL注入问题
	使用时机：
	   参数传递的时候：#{}
	   表名或者列名不固定的情况下：${} 会存在SQL注入问题
	参数类型：parameterType：可以省略
	特殊字符处理：
	  转义字符：
	  CDATA区：<![CDATA[
	      <
	  ]]>
	  
  多条件查询：
    SQL语句设置多个参数有几种方式？
	 散装参数：需要使用@Param("SQL中的参数占位符名称")
	 实体类封装参数：只需要保证SQL中的参数名和实体类属性名对应上，即可
	 map集合：只需要保证SQL中的参数名和map集合的键的名称对应上，即可设置成功
	 
多条件的动态条件查询
    SQL语句会随着用户的输入或外部条件的变化而变化，我们称为动态SQL
	
	动态条件查询
	  if:条件判断
	    test：逻辑表达式
		
	  问题： 当第二个条件突然作为第一个条件出现时，会有and连符，语法错误
	    解决办法1：利用恒等式
		解决办法2：使用where标签代替where关键字
	if：用于判断参数是否有值，使用test属性进行条件判断
	   存在问题：第一个条件不需要逻辑运算符
	   解决方案：
	     使用恒等式让所有条件格式都一样
		 <where>标签替换where关键字
		 
单条件动态条件查询
    从多个条件中选择一个
	choose(when,otherwise): 选择，类似于java中的switch语句
	choose中的<when>标签相当于 case语句
	choose中的<otherwise>标签相当于 default语句
	
配置文件添加元素
    MyBatis在添加数据时默认是开启事务状态，需要我们手动提交事务
	//在获取Session对象的时候默认是false，
	//我们可以在获取Session是手动设置为true就可以变为自动提交
	sqlSessionFactory.openSession(true);
	
主键返回：
    在数据添加成功后，需要获取插入数据库数据的主键的值，
	比如：添加订单和订单项，
	   添加订单
	   添加到订单项，订单项中需要设置所属订单的id
	这时候我们就需要设置两参数值
	//添加数据库元素的语句
	//设置useGeneratedKeys为true，他的默认值是false
	//设置keyProperty为当前表的id的属性名称
	<insert id = "addOrder" useGeneratedKeys="true" keyProperty="id">
	       sql语句
	</insert>