javaScript

是一个面向对象，的脚本控制语言

javaScript引入方式：
  内部脚本：将JS代码定义在HTML页面中
    在HTML中，javaScript代码必须位于<script>与</script>标签之间
	
  提示：在html文档中可以在任意地方，放置任意数量的<script>
     一般把脚本置于<body>元素的底部，可以改善显示速度，因为脚本执行会拖慢显示
	 
  外部脚本：将JS代码定义在外部JS文件中，然后引入到html页面中
    外部文件：demo.js  alert("hello JS");
	引入外部JS文件：<script src = "--/js/demo.js"></script>
	
  注意：
    外部脚本不能包含<script>标签
	<script>标签不能自闭和

书写语法：
    区分大小写，与java一样，变量名，函数名以及其他一切东西都是区分大小写的
	每行结尾的分号可有可无
	注释：
	  单行注释： //注释内容
	  多行注释： /*注释内容*/
	大括表示代码块
	
输出语句：
    使用window.alert()写入警告框
	使用document.write()写入html输出
	使用console.log()写入浏览控制台
	
变量：
  javaScript中用var关键字(varable的缩写)来声明变量
     var test = 20;
	 test = "张三";
  javaScript是一门弱类型语言，变量可以存放不同类型的值
  变量名需要遵循如下规则：
    组成字符可以是任何字母，数字，下划线(_)或美元符号($)
	数字不能开头
	建议使用驼峰命名
  ECMAScript 6新增了let关键字来定义变量。它的用法类似于var，但是声明的变量，
  只能在let关键字所在的代码块内有效，且不允许重复声明
  
  ECMAScript 6新增了 const关键字，用来声明一个只读的常量。一旦声明，常量的值就不能
  改变
  
数据类型
var test = 20;
  javaScript中分为：原始类型和引用类型
  5种原始类型：
    number：数字(整数，小数，NaN(Not a Number))
	string: 字符，字符串，单引号和双引都可以
	Boolean：布尔，true，false
	null：对象为空
	undefined：当声明的变量未初始化时，该变量的默认值是undefined
	
  使用typeof运算符可以获取数据类型
    alert(typeof age);
	
运算符：
  == 和 ===；
    ==会进行类型转换，===不会进行类型转换
  类型转换：
    其他类型转为数字：
	  string将字符串字面值转为数字。如果字面值不是数字，则转为NaN,
	  一般使用parseInt方法进行转换
	  boolean：true转为1，false转为0
	其他类型转为Boolean
	  number：0和NaN转为false，其他的数字转为true
	  string：空字符串转为false，其他字符串转为true
	  null：转为false
	  undefined：转为false
	  
函数：
  函数(方法)是被设计为执行特定任务的代码块
  定义： javaScript函数通过function关键字进行定义，语法为：
    function functionName(参数1，参数2..){
	   要执行的代码
	}
	  注意：
	    形式参数不需要类型，因为javaScript是弱类型语言
		返回值也不需要定义类型，可以在函数内部直接使用return返回即可
		function add(a+b){
		    return a+b;
		}
	  调用：函数名称(实际参数列表)
	  let result = add(1,2);
  定义方式二：
    var functionName = funct(参数列表){
	   要执行的代码
	}
	var add = function(a,b){
	    return a + b;
	}
	调用：JS中，函数调用可以传递任意个数参数
	let result = add(1,2,3);