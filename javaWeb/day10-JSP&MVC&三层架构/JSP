JSP

概念：
  java Server Pages java服务端页面
  一种动态的网页技术，其中既可以定义HTML，JS,CSS等静态内容，还可以定义java代码的
    动态内容
	JSP本质上就是一个Servlet
	JSP在被访问时，由JSP容器(Tomcat)将其转换为java文件(Servlet),在由容器(Tomcat)
	将其编译，最终对外提供服务的其实就是这个字节码文件
  JSP = HTML + java
  
JSP快速入门
  导入JSP坐标：
    <dependency>
		<groupld>javax.servlet.jsp</groupld>
		<artifactld>jsp-api</artifactld>
		<version>2.2</version>
		<scope>provided</scope>
	</dependency>
  创建JSP文件：
    直接new一个文件
  编写HTML标签和java代码：
    <body>
		<h1>hello jsp~</h1>   //html语句
		<% System.out.print("jsp hello~");%>  //java代码
	</body>
	
JSP脚本
  JSP脚本用于在JSP页面内定义java代码
  JSP脚本分类：
    <%...%> ：内容会直接放到jspService方法中
	<%=...%> ：内容会放到out.print()中，作为out.print()的参数
	<%!...%> ：内容会放到jspService()方法中，被类直接包含
	
JSP缺点：
  由于JSP页面内，既可以定义HTML标签，又可以定义java代码，造成了以下问题
    书写麻烦：特别是复杂的页面
	阅读麻烦
	复杂度高：运行需要依赖各种环境，JRE,JSP容器，javaEE...
	占内存和磁盘：JSP会自动生成.java和.class文件占磁盘，运行的是.class文件占内存
	调试困：出错后，需要找到自动生成的.java文件进行调试
	不利团队协作：前端人员不会java，后端人员不精HTML
	......
	
	
EL表达式：
  Expression Language 表达式语言，用于简化JSP页面内的java代码
  主要功能：获取数据
  语法： ${expression}
    ${brands} ：获取域中存储的key为brands的数据
  javaWeb中的四大域对象：
    page：当前页面有效
	request：当前请求有效
	session：当前会话有效
	application：当前应用有效
	
	el表达式获取数据，会依次从这四个域中寻找，直到找到为止
	
	
JSTL标签：
  JSP标准标签库(Jsp Standarded TagLibrary)，使用标签取代JSP页面上的java代码
  主要学习：
    <c:if></c:if>   //替换java中的if语句
	<c:forEach></c:forEach>		//替换java中的for语句
	
  JSTL快速入门：
    导入坐标
	  <dependency>
		<groupld>jstl</groupld>
		<artifactld>jstl</artifactld>
		<version>1.2</version>
	  </dependency>
	  <dependency>
	  <groupld>taglibs</groupld>
		<artifactld>standard</artifactld>
		<version>1.1.2</version>
	  </dependency>
	在JSP页面上引入JSTL标签库
	  <%@ taglib prefix="c" uri="http://java.sun.com.jsp.jstl.core" %>
	使用JSTL标签
	  例如：<c:if>
	  
	<c:forEach>: 相当于for循环
	  items：被遍历的容器
	  var：遍历产生的临时变量
	  varStatus：遍历状态对象
	  <c:forEach items = "${brands}" var = "brand">
		<tr align = "center">
		   <td>${brand.id}</td>
		   <td>${brand.xxxxx}</td>
		   <td>${brand.xxxxx}</td>
		   <td>${brand.xxxxx}</td>
		</tr>
	  </c:forEach>
	  
	  或者：
	  <c:forEach begin = "0" end = "10" step = "1" var = "i">
		${i}
	  <c:forEach>