day02

类型转换
  {
     隐式转换： ( 范围小的数据类型先提升为大的数据类型，类型统一后再进行运行， )
	      将数据类型中，取值范围小的数据，给取值范围大的类型赋值，可以直接赋值
		      int a = ?  double b = ?  double c = a + b
	    数据范围从小到大： byte --> [char short] --> int --> long -->float -->double
	byte short char  三种数据类型运算时，不管是否有更范围更高的数据类型都要先提升为int
	
	 强制转换：
	      将数据范围大的数值或者变量赋值给一个数据范围小的变量
		  强转格式： 目标数据类型 变量名 = （目标数据类型）值或者变量
		  eg： int a = 10; byte b = (byte)a;

  }

算术运算符
  字符的+操作
   当：int i = 1; char c = 'a';
       int b = i + c;
	   System.out.println(b);  // 98
	   运算时c转为int类型，按照ASCLL表转换
	   
  字符串的+操作（可以用+和任意数据类型进行拼接）：
    把字符串拼接起来
	
自增、自减运算
     单独使用时，无论在放在变量前边还是后边，结果都是一样的
	 eg：++a;  --a;
	 
	 参与操作使用：
	 eg：int a = 10; int b = ++a;
	 当++在前时，先自增，再参与变量的操作
	 System.out.println(a); //11
	 System.out.println(b); //11
	 
	 当++在后时，先将变量原本的值取出来进行操作，然后再进行自增
	 eg：int a = 10; int b = a++;
	 System.out.println(a); //11
	 System.out.println(b); //10
	 
	 or eg：int num = 123;
	 System.out.println(num++); //123先进性输出操作在进行自增
【自增、自减运算只能操作变量，不能操作常量。】

扩展赋值运算符：（运算时，底层自带强转功能）
     +=  -=  *=  /=  %==
     eg：+=，先将符号左右两边的数据进行加法运算，结果复制给左边。
        int a=4,b=5;
        a+=b;
        System.out.println(a); //9
		
逻辑运算符：
     &：并且 （遇到false就为false，只有两边都是true，结果才是true）  
	 |：或者 （只要两边有一个是true，结果就是true）
	 ^：异或 （两边不一样的时候结果为true，一样为false）
  短路逻辑运算符：
     &&  ||
	 &&具有短路效果，当符号左边为false的时候，右边就不执行了
	 &无论符号左边是true还是false，右边都要执行。
	 ||如果左边为真，右边就不执行了
	 |无论符号左边是true还是false，右边都要执行。
	 
三元运算符：
     关系表达式 ? 表达式1 ：表达式2
	 执行流程：
	     关系表达式进行计算
		 如果为true，取表达式1的值
		 如果为false，取表达式2的值

