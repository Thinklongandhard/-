day06
进制：
   java中除了十进制以外都要进行修饰
   二进制：数值前面以0b开头，b大小写都行
   八进制：数值前面以0开头
   十六进制：数值前面以0x开头，x的大小写都行
   
   eg:public static void main(String[] args){
        System.out.println(10);
        System.out.println(0b10);
        System.out.println(010);
        System.out.println(0x10);
    }
	
	进制转换：
	   （二、十六、八，任意）进制到十进制；
	     公式：系数*基数的权次幂相加
		 系数：每一【位】上的数
		 基数：几进制，就是几
		 权：以数值的右侧，以0开始，逐个+1增加
		 
		 十进制到任意进制的转换：
		 公式：除基取余
		    使用源数据，不断的除以基数（几进制就是几）得到余数
			得到的余数倒着拼接。
			
	原码，反码，补码介绍
	  补码是通过反码和原码推算出来的。
	     原码（可以直观看出数据大小）【看数据】
		     二进制定点表示法，即最高位为符号为[0]表示正[1]表示负其余表示数据大小
		 反码（转数据）
		     正数的反码与其原码相同，负数的反码是对其原码逐位取反，但符号位除外
		 补码（数据以该状态进行运算）【运算数据】
		     正数的补码与其原码相同，负数的补码是对其反码的末尾+1得到
			 
	位运算符：
	  位运算符指的是二进制位的运算，现将十进制数转换成二进制后，再进行运算。
	  （1代表true，0代表false）
	  6的二进制  0110
	& 2的二进制  0010  -->结果为 0010（遇false则false，遇0则0）
	| 位（或）：遇true则true，遇1则1
	^ 位（异或）：相同为false，不同则为true  （操作常量）
	~ 位（取反）：全部取反，0变1,1变0（包括符号位）
	
	位移运算符：
	     << 有符号左移运算，二进制位向左移动，左边符号位丢弃，右边补齐0
		    运算规律：向左移动几位，就是乘以2的几次幂
		
		 >> 有符号右移运算，二进制位向右移动，使用符号位进行补充
		    运算规律：向右移动几位，就是除以2的几次幂
			
		 >>> 无符号的右移运算符，无论符号位是0还是1，都补0
	  
二维数组：
     格式1： 数据类型[][]变量名；
	 eg： int[m][n] arr;
	 m: 可以存放几个一维数组
	 n: 每一个数组可以存放多少个具体元素
	 
	 格式2： 数据类型 变量名[][];
	 格式3： 数据类型[]变量名[];
	 eg：int arr[][];
	 eg: int[] arr[];
	 
	 静态初始化： 
	     数据类型[][] 数组名 = new 数据类型[][]{{元素1，元素2},{元素3，元素4}};
	   简化：
	     数据类型[][] 数组名 = {{元素1，元素2},{元素3，元素4},{元素6，元素5}};
	 
	 public static void main(String[] args){
        //定义一个二维数组，可以存放三个一维数组，每个一维数组中可以存放3个元素
        int[][] arr = new int[3][3];
        //在堆内存中二维数组中2索引指向的一维数组开辟的存储空间只能存储3个元素，无法访问到3索引。
        //arr[2][3] = 11;  //这里产生了索引越界，
        //System.out.println(arr[2][3]);
        //java.lang.ArrayIndexOutOfBoundsException: 3  //索引越界

        
//内存地址的替换

        //这里定义了一个isArrlist数组，在堆内存中开辟了一个存储空间
        int[] isArrlist = new int[]{11,22,33,44};
        //堆内存中二维数组中2索引指向的一维数组开辟的存储空间只能存储3个元素，
        arr[2] = isArrlist; //这里将原本arr二维数组中的2索引指向的内存空间替换掉了，变成了isArrlist数组所指向的内存空间
        //在这里访问的时候，arr数组2索引指向的内存空间是isArrlist的内存空间不再是原本的二维数组定义时产生的内存空间。
        System.out.println(arr[2][3]);  //44可以访问到
    }
	