线程池
线程池中的线程不是创建出来就有Max个线程
而是一个一个添加的

问题：为什么需要将线程交给线程池进行管理呢

意义：
    系统创建一个线程的成本是比较高的，
	因为它涉及到与操作系统的交互，当程序中需要创建大量生存期很短暂的线程时，
	频繁的创建和销毁线程。
	对系统的资源消耗有可能大于业务处理对系统资源的消耗，这样就不太好了
	针对这种情况，为了提高性能，我们就可以采用线程池
	线程池在启动时，会创建大量空闲线程，当我们向线程池提交任务是，
	线程池就会启动一个线程来执行这个任务，等待任务执行完毕
	线程并不会死亡，而是再次返回线程池进入空闲状态等待下一次的调用
	
	总结：
	    将线程对象交给线程池维护，可以降低系统成本，从而提高程序的性能
		
【在《阿里巴巴java开发手册》中指出了线程资源必须通过线程池提供，不允许
  在应用中自行显示的创建线程。
  这样一方面使线程的创建更加规范，可以合理控制开辟线程的数量
  另一方面线程的细节管理交给线程池处理，优化了资源的开销
  而线程池不允许使用Executors去创建，而是通过ThreadPoolExecutor方式】
  
    创建线程池对象
	  ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor
	  (核心线程数量,最大线程数量,空闲线程最大存活时间,任务队列,创建线程工厂,任务的拒绝策略)
	  
	  参数一：核心线程数量 -> 不能小于0
	  参数二：最大线程数量 -> 不能小于等于0,最大数量 >= 核心线程数量
	  参数三：空闲线程最大存活时间 -> 不能小于0
	  参数四：时间单位 -> 时间单位
	  参数五：任务队列 -> 不能为null  让任务在队列中等待，当有线程空闲了，再次队列中出来
	  参数六：创建线程工厂 -> 不能为null
	  参数七：任务的拒绝策略 -> 不能为null