进程
   是正在运行的程序
   
      是系统进行资源分配和调用的独立单位
	  每一个进程都有它的内存空间和系统资源
	  
线程
    是进程中的单个顺序控制流，是一条执行路径
	    单线程： 
		    一个进程如果只有一条执行路径，则称为单线程程序
	    错现场：
		    一个进程如果有多条执行路径，则称为多线程程序
			
多线程的实现方式：
    方式1：
	    定义一个类MyThread继承Thread类
		在MyThread类中重写run（）方法
		创建MyThread类的对象
		启动线程
	方式2： 实现Runnable接口
	    定义一个类MyThread实现Runable接口
		在MyRunnable类中重写run方法
		创建MyRunnable类的对象
		创建Thread类的对象，把MyRunnable对象作为构造方法的参数
		启动线程
【两种方式，1：继承Thread类，实现Runnable接口】

相比继承Thread类，实现Runnable接口的好处
    避免了java单继承的局限性
	适合多个相同程序的代码去处理同一个资源的情况，把线程和程序的代码，
	数据有效分类，较好的体现了面向对象的设计思想
	    
		
	两个问题：
	    为什么重写run方法
		    因为run是用来封装被线程执行的代码
		run方法和start方法的区别
		    run方法封装线程执行的代码，直接调用，相当于普通方法的调用
			start方法启动线程，然后由JVM调用此线程的run方法
			
	设置和获取线程名称
	    Thread类中设置和获取线程名称的方法
		    void setName(String name)
			    将此线程的名称更改为等于参数name
			String getName()
			    返回此线程的名称
			通过构造方法也可以设置线程名称
		如何获取main()方法所在的线程名称
		    public static Thread currentThread()
			    返回对当前正在执行的线程对象的引用
线程调度
    线程的两种调度模型
	    分时调度模型：所有线程轮流使用CPU的使用全，平均分配每个线程占用
		     CPU的时间片
		抢占式调度模型：优先让优先级高的线程使用CPU，如果线程的优先级相同。
		那么会随机选择一个，优先级高的线程获取的CPU时间片相对多一些
	java使用的是抢占式调度模型
	
	假设计算机只有一个CPU，那么CPU在某一个时刻只能执行一条指令，线程只有
	得到CPU时间片，也就是使用权，才可以执行指令。所以说多线程程序的执行是有随机性，
	因为谁抢到CPU的使用权是不一定的
	
	Thread类中设置和获取线程优先级的方法
	    public final int getPriority():
		   返回此线程的优先级
		public final void setPriority(int newPriority):
		   更改此线程的优先级
		线程的默认优先级是5，线程优先级的范围是：1-10
		线程优先级高仅仅表示线程获取的CPU时间片的几率高，但是要在次数比较多，
		或者多次运行的时候才能看到想要的结果
		
线程控制：
    static void sleep(long millis)
	  //使当前正在执行的线程停留（暂停执行）指定的毫秒数
	void join()
	  //等待这个线程死亡
	void setDaemon(boolean on)
	  //将此线程标记为守护线程，当运行的线程都是守护线程时，java虚拟机将退出