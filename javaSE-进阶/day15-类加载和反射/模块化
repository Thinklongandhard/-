模块化概述
随着java多年的发展，java语言也越来越庞大，逐渐发展成为一门“臃肿”的语言，为了给
java进行“瘦身”，让java实现轻量，java9正式推出了模块化系统。java被拆分为N多个模块
并允许java程序可以根据需要加载程序必须的java模块，这样就可以让java以轻量的方式
来。


    基本使用步骤：
	    创建模块(按照以前的讲解方式创建模块，创建包，创建类，定义方法)
		  //为了体现模块的使用，我们创建2个模块，一个是One,一个是Two
		在模块的src目录下新建一个名为module-info.java的描述文件，该文件专门定义模块
		名，访问权限，模块依赖等信息
		  //描述性文件中使用模块导出和模块依赖来进行配置并使用
		模块中所有未导出的包都是模块私有的，他们是不能再模块之外被访问的
		  //在One这个模块下的藐视性文件中配置模块导出
		  //模块导出格式： exports 包名
		一个模块要访问其他的模块，必须明确指定依赖那些模块，未明确指定依赖的模块不能
		访问
		  //模块依赖格式： requires 模块名
		  
	模块服务的使用
	    服务：从java6开始，java提供了一种服务机制，允许服务提供者和服务使用者之间完成
		解耦简单的说，就是服务使用者只面向接口编程，但不清楚服务提供者的实现类
		
		java9的模块化系统则进一步的简化了java的服务机制，java9允许将服务接口定义在一个
		模块中，并使用uses语句来声明该服务接口，然后针对该服务接口提供不同的服务实现类，
		这些服务实现类可以分布在不同的模块中，服务实现模块则使用provides语句为服务接口
		指定实现类
		服务使用者只需要面向接口编程即可