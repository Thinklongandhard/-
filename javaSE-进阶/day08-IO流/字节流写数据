字节流
   字节流抽象基类
        InputStream：
		    这个抽象类是表示字节输入流的所有类的超类
		OutputStream
		    这个抽象类是表示字节输出流的所有类的超类
		子类名特点：
		    子类名称都是以其父类名作为子类名的后缀
			
	FileOutPutStream: 文件输出流用于将数据写入File
	
	    FileOutPutStream（String name）
		    创建文件输出流已指定的名称写入文件
			
			
	使用字节输出流写数据的步骤：
	    （创建对象）
	    创建字节输出流对象（调用系统功能创建了文件，创建字节输出流对象，
		    让字节输出流对象指向文件）
		
		（调方法）
		调用字节输出流对象的写数据方法
		
		（关闭流）
		释放资源（关闭此文件输出流并释放与此相关联的任何系统资源）
		
构造方法：
    FileOutputStream(String name)
      //创建文件输出流以指定的名称写入文件	
	FileOutPutStream(File file)
	  //创建文件输出流以写入由指定的File对象表示的文件

		
字节流写数据的3种方式
    void write(int b)
	  //将指定的字节写入此文件输出流
	  //一次写一个字节数据
	void write(buty[] b)
	  //将b.length字节从指定的字节数组写入此文件输出流
	  //一次写一个字节数组数据
	void write(buty[] b,int off,int len)
	  //将len字节从指定的字节数组开始，从偏移量off开始写入此文件输出流
	  //一次写一个字节数组的部分数据
	  
	【byte[] getBytes( )】 String 类中的一个方法，返回字符串对应的字节数据
	
	字节流写数据的两个小问题：
	   字节流写数据如何实现
	        写完数据后，加换行符
                windows: \r\n
      			Linux: \n
				mac: \r
				
		字节流写数据如何实现追加写入呢？
		    public FileOutPutStream(String name,boolean append)
			创建文件输出流以指定的名称写入文件。如果第二个参数为
			true，则字节将写入文件的末尾而不是开头
			
字节流写数据的规范：
    创建字节流对象时，要先创建后赋值，以免被try..catch包裹以后无法访问到字节流对象
	每个输出流对象都要进行关闭流的操作
	关闭流时用的.close()方法，
	但是在使用闭流操作时，为了防止无法执行到该语句，需要用finally语句进行修饰
	为了防止在赋值时，赋了一个空值，所以要在关闭流之前进行一个判断
	判断该输出流对象是否为空。
	