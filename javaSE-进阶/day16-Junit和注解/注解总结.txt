注解总结

注解概述：
   注解的本质是一个接口
   注解不是程序的一部分，他可以被JVM看到，但是注解不参与程序的运行

注解的定义格式
   这类注解称为元注解
   注解上也可以加入注解
   @Target(value = )    //定义注解可以访问加载什么上，可以是类，可以是方法，可以是成员变量
   @Retention(value = )  //定义注解是否生成.class文件，是否可以被JVM访问到
   @Documented   //描述注解是否被抽取到API
   @Inherited  //描述注解是否被子类继承
   public @interface 注解名{
        注解中可以有方法
        但都是抽象方法
        eg:  String 方法名();
        返回值是String类型的方法，不存在方法体
    }

元注解： 
    java中定义好的注解，不需要我们重新定义
    @Override   //检查方法是否是重写的父类(接口)方法
    @Deprecated ：该注解标注的内容，表示已经过时
    @SuppressWarnings ：压制警告
   
解析注解
    通过获取含有注解的类的字节码文件(.class)   // Class<?> c = 类名.getclass;
    通过getAnnotation(注解名.class)方法获取到注解的字节码文件  // Anno an = c.getAnnotation(Anno.class)
      //在获取注解的字节码文件时，就相当于在内存中重写了注解中的抽象方法，并将方法的返回值进行return
    有了注解的字节码文件对象，就可以获取到注解中的抽象方法，这时候就可以获得到重写方法的返回值
    有了返回值我们就算是对注解的解析已经完成

注解的应用
    注解是给谁看的
    给JVM虚拟机看的(编译器)，给解析程序看的

    注解的应用：
    编写文档：通过代码里标识的注解生成文档[doc文档(API文档)]
    代码分析：通过代码里标识的注解对代码进行分析[使用反射]
    编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查[@Override]
    