注解
概念：
   JDK1.5之后的新特性
   说明程序的
   使用注解：@注解名称
   
   作用分类：
      1、编写文档：通过代码里标识的注解生成文档[生成文档doc文档（javaAPI）]
	  2、代码分析：通过代码里标识的注解对代码进行分析[使用反射]
	  3、编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查[eg: Override]
	  
   JDK中预定义的一些注解：
      @Override : 检查被该注解标注的方法是否是继承自父类(接口)的
	  @Deprecated ：该注解标注的内容，表示已经过时
 	  @SuppressWarnings ：压制警告
	   （通常传入参数all @SuppressWarnings("all")）
	   
   自定义注解：
      格式：
	    元注解
		public @interface 注解名称{
		   属性列表
		}
		
	  本质：注解本质上就是一个接口，该接口默认继承Annotation接口
	    public interface Myanno extends java.long.annotation.Annotation{}
		
	  属性：接口中的抽象方法
	    要求：
		   属性的返回值类型
		     基本数据类型
			 String
			 枚举
			 注解
			 以上类型的数组
		   
		   定义了属性，在使用时需要给属性赋值
		     1、如果定义属性时，使用default关键字给属性默认初始化值，则使用注解是，可以不进行属性的赋值
			 2、如果只有一个属性需要赋值，并且属性的名称是value,则value可以省略，直接定义值即可
			 3、数组赋值时，值使用{}包裹，如果数组中只有一个值，则{}省略
			 
	  元注解：
	     @Target: 描述注解能够作用的位置
		   TYPE,  //作用在类上
		   FIELD, //作用在成员变量上
		   METHOD, //作用在方法上
		 @Retention: 描述注解被保留的阶段
		   @Retention(value = RetentionPolicy.RUNTIME) 
		   //当前描述的注解，会被保存到class字节码文件中，会被JVM虚拟机读取
		   //SOURCE,不会被保存到class字节码文件中，也不会被JVM读取
		   //CLASS,会保存到class字节码文件中，但是不会被JVM读取
		 @Documented: 描述注解是否被抽取到api文档中
		 @Inherited: 描述注解是否被子类继承
		 