多态
   同一个对象，在不同时刻表现出来的不同形态
   eg：
     我们可以说猫是猫： 猫 cat = new 猫();
	 我们也可以说猫是动物： 动物 animal = new 猫();
	 在这里猫在不同时刻表现出了不同的形态
	  this is the 多态！
	  
   多态的前提和体现：
     1、有继承/实现关系
	 2、有方法重写
	 3、有父类引用指向子类对象
   多态中的访问特点：
   成员变量：
        多态的形式访问成员变量，访问的是父类中的成员变量
	    编译时，也是父类中变量的值
	成员方法：
	    多态的形式访问成员方法，访问的是父类中的成员方法
		编译时，是看子类中的成员方法。
  原因：		
	（因为成员方法有重写，而成员变量没有）
	
  多态的好处和弊端：
     好处： 提高了程序的扩展性
	    （定义方法时，使用父类型作为参数，将来在使用的时候，使用具体的
		  子类型参与操作）
	 弊端： 不能使用子类的特有功能
	 
多态中的转型：
   1、向上转型
      从子类到父类
	    父类引用指向子类对象
   2、向下转型
      从父类到子类
	    父类引用转为子类对象
		
	eg://向上转型
        Animale a = new Cat();  //父类引用a指向子类对象new Cat()
        a.eat();


        Animale a1 = new Cat();
        //向下转型
        Cat c = (Cat)a1;  //把a1类型强转为Cat类型，赋值给c
        //吧父类引用转为子类对象
        c.eat();
        c.paly();
        //可以访问到子类的特有功能