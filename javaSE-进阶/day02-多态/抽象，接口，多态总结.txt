抽象，接口，多态总结

抽象类和抽象方法
   使用abstract修饰的类是抽象类，被abstract修饰的方法是抽象方法
   抽象方法只能放在抽象类中，抽象类中可以没有抽象方法

抽象类应用
   抽取几个或者两个类中的公共代码，将其写在抽象类中，可以使用abstract修饰，也可以不用
   被abstract修饰的抽象方法，在子类继承后必须重写。所有可以使用普通方法，在需要用到的类
   中选择性重写，增加了代码的复用性

抽象注意事项
   抽象类中可以有普通方法，但是普通类中不能有抽象方法，抽象方法是对方法的抽象，抽象方法
   没有方法体，在子类继承抽象类后，抽象类中的方法必须重写，抽象类不能创建对象。

接口概述
   接口是通过interface修饰的class类，接口中可以有抽象方法，可以有默认方法，还可以有静态
   方法，接口可以通过implements来实现。

接口的定义和实现
   接口的定义时通过interface来定义，在实现时使用implements 接口名 来实现接口，一个类
   可以实现多个接口

接口与接口的关系
   一个接口可以实现多个接口

抽象类和接口的区别
   抽象类中可以有普通成员方法，接口中没有成员方法，
   抽象类的实现要通过继承，一个类只能继承一个父类，接口的实现通过implements，一个类
   可以实现多个接口。
   接口继承抽象类，抽象类中的抽象方法可以选择性重写

多态概述
   通过子类继承父类，通过以父类为对象创建对象可以new 子类(父类实现类)
   父类也可以通过强转的形式去访问到子类中的成员变量和方法

多态的应用场景
   当父类是一个抽象类的时候，抽象类不能创建对象，这时候就可以通过多态的形式去实现父类的
   实现类来创建对象，有了父类对象后，如果需要用到子类中的方法就可以通过强转的形式去访问
   子类中的方法

多态的转型
    向下转型
    Cat c = a(Cat);(子类)父类对象就可以访问到子类中的方法