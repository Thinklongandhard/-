Lambda表达式

实现多线程的三种形式
形式一：
    定义一个类MyRunnable实现Runnable接口，重写run()方法
	创建MyRunnable类的对象
	创建Thread类的对象，把MyRunnable的对象作为构造参数传递
	启动线程
	
形式二：
    匿名内部类的方式改进
	
形式三：
    Lambda表达式的方式改进

Lambda表达式的三要素：
    形式参数，箭头，代码块
	标准格式：
	格式：（形式参数）-> {代码块}
	形式参数：
	   如果有多个参数，参数之间用逗号隔开；如果没有参数，留空即可
	->:
	   由英文中画线和大于符号组成，固定写法。代表指向动作
	代码块
	   是我们具体要做的事情，也就是以前我们写的方法体内容

使用前提：
    【有一个接口，接口中有且仅有一个抽象方法】
	
Lambda表达式的省略模式
    省略规则：
	    参数类型可以省略，但是有多个参数的情况下，不能只省略一个
		如果参数有且仅有一个，那么小括可以省略
		如果代码块的语句只有一条，可以省略大括的分号，甚至是return 
		
Lambda表达式的注意事项：
    注意事项：
	    使用Lambda必须要有接口，并且要求接口中有且仅有一个抽象方法
		必须有上下文环境，才能推导出Lambda对应的接口
		    根据局部变量的赋值，得知Lambda对应的接口
			   Runnable = () -> System.out.println("Lambda表达式");
			根据调用方法的参数，得知Lambda对应的接口
			   new Thread(() -> System.out.println("Lambda表达式")).start;
	