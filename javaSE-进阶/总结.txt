
数据类型：
     取值范围从小到大
         byte --> short --> int -->long
标识符：
     1、由数字，字母，下划线，美元符号组成
     2、不能以数字开头
     3、不能是关键字
     4、区分大小写
类型转换：
     强转：   格式：
                 (目标数据类型) 值或者变量 
三元运算符
    格式：
        关系表达式 ？表达式1 : 表达式2
三种循环使用场景：
                 1、明确循环次数，推荐使用for循环
	 2、不明确使用循环次数，推荐使用while循环
	 3、do..while循环很少使用，（使用时先执行一次循环体）

结束表示符：
    continue ：跳过本次循环体内容的执行
    break ： 跳出循环
数组中的异常
	 【空指针异常：访问的数组已经不再指向堆内存的数据，造成空指针异常】NullPointerException
	 【null：空值，引用数据类型的默认值，表示不再指向任何有效对象。】
方法重载：
      【注意：识别方法之间是否重载，只要看方法名和参数，跟返回值无关】

进制转换：
	   （二、十六、八，任意）进制到十进制；
	     公式：系数*基数的权次幂相加
		 系数：每一【位】上的数
		 基数：几进制，就是几
		 权：以数值的右侧，以0开始，逐个+1增加

this 关键字：
    代表所在类的对象引用
    （就是当前对象）

String类常见的构造方法：
                  1、public String()  无参构造
	  2、public String(char[] chs) 
	     根据字符数组的内容，来创建字符串对象
	  3、public String(String original)
	     根据传入的字符串内容，来创建字符串对象
	  4、String s = "abc";
	     根据赋值的方法创建字符串对象。

StringBuilder
    是一个可变的字符串类，我们可以把它看成一个容器
	（可变）
	作用：提高字符串的操作效率


集合：
   集合类的特点：提供一种存储空间可变的存储模型，存储的数据容量
   可以发生改变
   
   集合和数组的区别：
      1、共同点
	     都是存储数据的容器
	  2、不同点
	     数组的容量是固定的，集合的容量是可以改变的
	
修饰符：
    private  ：用一个类中可以访问到
    默认     ：同一个类，同一个包中
    protected：同一个类，同一个包，不同包中的子类
    public   ：不同包中的无关类都可以访问
	

抽象类不能实例化
       抽象类如何实例化，
     【必须采用多态的方式，通过子类对象实例化，叫抽象类多态】

抽象类的成员特点：
    1、成员变量
	   可以是变量
	   也可以是常量
    2、构造方法
	   有构造方法，但是不能实例化
	   构造方法的作用： 
	      用于子类访问父类数据的初始化
    3、成员方法
	   可以有抽象方法：限定子类必须完成某些行为
	   也可以有非抽象方法：提高代码的复用性

抽象类名作为形参和返回值
    1、方法的形参是抽象类名，其实需要的是该抽象类的子类对象
    2、方法的返回值是抽象类名，其实返回的是该抽象类的子类对象。


多态中的转型：
   1、向上转型
      从子类到父类
	    父类引用指向子类对象
   2、向下转型
      从父类到子类
	    父类引用转为子类对象
	
接口名作为形参和返回值
   1、方法的形参是接口名，其实需要的是改接口的实现类对象
   2、方法的返回值是接口名，其实返回的是该接口的实现类对象

内部类
	定义格式：
	     public class 类名{
	                   修饰符 class 类名{
		   
		   }
	     }

成员内部类如何使用：
	 成员内部类，外界如何创建对象使用？
	                      (仅限于public)
	     格式：  外部类名.内部类名 对象名 = 外部类对象.内部类对象
	      eg :       Outer.demo d = new Outer().new demo();

匿名内部类
    前提： 存在一个类或者接口，这里的类可以是具体类也可以是抽象类
	
	格式：  
	   new 类名或者接口名(){
	            重写方法
	   }
	   
	   eg: new inter(){   //本质是一个匿名的对象，是一个继承了该类或者
	          public void show(){     //实现了该接口的子类匿名对象
			      
			  }
	   }



//包装类：String

int和String的相互转换

   基本类型包装类的最常见操作就是，用于基本类型和字符串之间的相互转换
   1、int转换为String
     public static String valueOf(int i):返回int参数的字符串表示形式
	 该方法是String类中的方法
   2、String转换为int
     public static int parseInt(String s):将字符串解析为int类型，该方法
	 是Integer类中的方法

包装类中使用时的自动装箱和拆箱的注意事项
注意：
    在使用包装类类型的时候，如果做操作，最好先判断是否为null
    我们推荐：【只要是对象，在使用前就必须进行不为null的判断】




冒泡排序：
      一组排序的方式，对要进行排序的数据中相邻的数据进行两比较，将较大的
	  数据放在后面，依次对所有的数据进行操作，直至所有数据按要求完成排序

	1、如果有n个数据进行排序，总共需要比较n-1次
	2、每一次比较完毕，下一次的比较就会少一个数据参与

Math集合中的常用方法
     Math没有构造方法，他的成员都是静态的
     所以可以直接通过Math.方法直接访问
常用方法
    1、public static int abs(int a)
         //返回参数的绝对值
    2、public static double ceil(double a)                                  //大于传入参数的最小整数
         //返回大于或等于参数的最小double值，等于一个整数
    3、public static doublie floor(double a)                              //小于传入参数的最大参数
         //返回小于或等于参数的最大double值，等于一个整数
    4、public static int round(float a)
         //四舍五入返回一个整数
    5、public static dpuble pow(double a,double b)
         //返回a的b次幂
    6、public static double random()
         //返回值为double的正值，[0.0,1.0)

******
日期类（G:\桌面\Java笔记\笔记\黑马学习记录\javaSE-进阶\day04-包装类-日期类）
******


自定义异常：
   格式：  
     public class 异常类名 extends Exception{
	    无参构造;
	    带参构造;
	 }
	 eg:
	   public class ScoreException extends Exception{
	       public ScoreException(){}
		   public ScoreException(String message){
		       super(message);
		   }
	   }


集合类的体系结构
   单列：
      只有数据
	  Collection:  (接口)
	        List: 可重复   （接口）
		ArrayList:   （实现类）
		LinkedList:  （实现类）
		   .
		   .
		   .
	         Set： 不可重复 （接口）
		   HashSet:     （实现类）
		   TreeSet:     （实现类）
		   .
		   .
		   .
   双列：
      一把key 对应 一个相应的 value
	  Map:     （接口）
	       HashMap:   （实现类）
		.
		.
		.
		
集合的使用
Collection集合概述
	   JDK中没有Collection的具体实现类
	   在使用中，要用Collection的子接口的具体实现类来应用
	   
	   1、是单列集合的顶层接口，它表示一组对象，这些对象也称为
	      Collection的元素
	   2、JDK中不提供此接口的任何直接实现，它提供更具体的子类接口
	       （如Set和List）来实现
		   
	创建Collection集合的对象
                      多态的形式:  -->  具体的实现类ArrayList

List集合
  有序集合（也称之为序列）
  
    1、可以精确控制列表中的每一个元素的插入位置，可以通过索引访问数据
    2、与Set集合不同，列表通常允许重复的元素
	
	特点：
	  1、有序： 
	       存储和取出的元素顺序一致
	  2、可重复：
	       存储的元素可以重复

并发修改异常
    并发修改异常：
           ConcurrentModificationException
	
	产生原因：
	   迭代器遍历的过程中，通过集合对象修改了集合中元素的长度，造成了迭代器
	   获取元素中判断预期修改值和实际修改值不一致
	
	解决方案：
	   用for循环遍历，然后用集合对象做对应的操作即可

List的子集合
  List集合常用子类：
       ArrayList，LinkedList
	   
	   
	ArrayList：
	      底层实现是数组
	      查询快，增删慢
	LinkedList：
	      底层实现是一个双链
	      查询慢，增删快

******
数据结构（G:\桌面\Java笔记\笔记\黑马学习记录\javaSE-进阶\day05-集合进阶数据结构）
******

	  
Map集合的遍历（方法1）
	    Map集合集合中存储的元素都是成对出现的，所以我们把Map集合看成是以个夫妻对的
		集合
		
		遍历方法：
		    1、获取所有键的集合，用keySet()方法去实现
			2、遍历键的集合，获取到每一个键，用增强for实现
			3、根据键去找值，用get(Object key)方法实现
			
Map集合的遍历（方法2）
	    Map集合中的元素都是成对出现的，所以我们把Map看成是一个夫妻对的集合
		
		遍历方法：  
		    1、获取所有键值对对象的集合
			    Set<Map.Entry<K,V>>entrySet(): 获取所有键值对对象的集合
			2、遍历键值对对象的集合，得到每一个键值对对象
			    用增强for实现，得到每一个Map.Entry
			3、根据键值对对象获取键和值
			    使用getkey()方法获取key
				使用getvalue()方法获取value

************
Collections
   概述
      是针对集合操作的工具类
	  
	Collections类的常用方法
	   public static <T extends Comparable<? super T>> void sort(List<T>list)
	     //将指定的列表按升序排序
	   public static void reverse(List<?> list)
	     //反转指定列表中元素的顺序
	   public static void shuffle(List<?> list)
	     //使用默认的随机源随机排列指定的列表
************