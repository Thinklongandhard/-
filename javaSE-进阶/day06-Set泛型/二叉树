平衡二叉树
左旋
   就是将根节点的右侧往左拉，原先的右子节点变成新的父节点，并把多余的左子
   节点出让，给已经降级的根节点当右子节点
   
右旋
   就是将根节点的左侧往右拉，原先的左子节点变成新的父节点，并把多余的右子
   节点出让，给已经降级的根节点当左子子节点
   
红黑树
    红黑树是一种自平衡的二叉查找树，是计算机科学中用到的一种数据结构
	1972年被称为平衡二叉树B数，后来在1978年被修改为红黑树
	它是一种特殊的二叉查找树，红黑树的每一个节点上都有存储位表示节点
	的颜色，
	每一个节点可以是红或者黑，
	红黑树不是高度平衡的，是通过红黑规则进行实现的
	
	红黑规则
	    每一个节点或者是红色的，或者是黑色的
		根节点必须是黑色
		如果一个节点没有子节点或者父节点，则该节点相应的指针属性值为nil,
		这些Nil视为叶节点，每个叶节点是黑色的
		如果某一个节点是红色，那么它的子节点必须是黑色(不能出现两红色节点相连的情况)
		对每一个节点，从该节点到其所有后代节点的简单路径上，均包含相同数目
		的黑色节点。
		
		
添加节点：
    红黑树在添加节点的时候：
	   添加的节点默认是红色的
	   
	   添加节点：根节点位置 ->  直接变为黑色
	             非根节点位置 -> 父节点为黑色 -> 则不需要任何操作
				                 父节点为红色 -> 叔叔节点为红色 -> 将‘父节点’设为黑色，将‘叔叔节点’设为黑色
								                                   将‘祖父节点’设为‘红色’，
																   如果祖父节点为根节点，再次变为黑色
								                 叔叔节点为黑色 -> 将‘父节点’设为‘黑色’
												                   将‘祖父节点’设为‘红色’
																   以祖父节点为支点进行旋转
												 