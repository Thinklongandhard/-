Collection集合

  集合特点：
     提供一种存储空间可变的存储模型，存储的数据容量可以随时发生改变
	 
集合遍历:
    Iterator ： 迭代器，集合的专用遍历方式
	  Iterator<E> iterator(); 
	     返回此集合中元素的迭代器，通过集合的Iterator()方法得到
		 （他依赖集合而存在）
		 
		 格式：
		    Iterator<泛型> 对象名 = new ArrayList<泛型>();
			while(对象名.hasnext){
			    泛型 类型名 = 对象名.next();
				System.out.println(类型名);
			}
	 
集合类的体系结构
   单列：
      只有数据
	  Collection:  (接口)
	    List: 可重复   （接口）
		   ArrayList:   （实现类）
		   LinkedList:  （实现类）
		   .
		   .
		   .
		Set： 不可重复 （接口）
		   HashSet:     （实现类）
		   TreeSet:     （实现类）
		   .
		   .
		   .
   双列：
      一把key 对应 一个相应的 value
	  Map:     （接口）
	    HashMap:   （实现类）
		.
		.
		.
		
		
    Collection集合概述
	   JDK中没有Collection的具体实现类
	   在使用中，要用Collection的子接口的具体实现类来应用
	   
	   1、是单列集合的顶层接口，它表示一组对象，这些对象也称为
	      Collection的元素
	   2、JDK中不提供此接口的任何直接实现，它提供更具体的子类接口
	       （如Set和List）来实现
		   
		创建Collection集合的对象
		  1、多态的形式:  -->  具体的实现类ArrayList
		  
		Collection 集合的常用方法
		   boolean add(E e)    //源码中显示，add方法的返回值永远为true
		     //添加元素
		   boolean remove(Object o)
		     //从集合中移出指定的元素
		   void clear()
		     //清空集合中的元素
		   boolean contains(Object o)
		     //判断集合中是否存在指定的元素
		   boolean isEmpty()
		     //判断集合是否为空
		   int size()
		     //集合的长度，也就是集合中的元素个数
		  
		  
		  